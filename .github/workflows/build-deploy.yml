name: Build and Deploy Code
# Might have a workflow for one branch, and another one for a different branch
#on:  #Tells when we should complete this action [push, pull_request]
#  push:
#    branches:  #["main", "another_branch", "freature_branch"] or the following
#      - "main"
#      - "another_branch"
#  pull_request:
#    branches:
#      - "test_branch"

on: [push, pull_request]
#Job is a list of steps that is going to run on a specific runner

#env: universal environment varibles
#  DATABASE_HOSTNAME=localhost


jobs: 
  build:
    environment:
      name: testing
    env: # This is job only envs. will get removed once job is done#DATABASE_HOSTNAME: localhost # Still dont want to hardcode these env variables into my github repo
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}  #Can do this through secrets in github repo. Might be clash betwen env and global secrets
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}} #need to figure out how to have dollar signs and stuff in yml
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}  
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}} #I thought kind of string interpolation, but no it was causing problem. Need to check i theres 
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        
    runs-on: ubuntu-latest #go to workflow syntax to see what OS we can run on 
    steps: 
      - name: pulling git repo
        uses: actions/checkout@v4 #github marketplace has prebuild actions to use, such as checkout
        #name: say hi to James
        #run: echo "hello James"       #sudo apt install
        #Can setup a matrix to test versions of python, same with operating systems
      - name: install python 
        uses: actions/setup-python@v5
        with: 
          python-version: '3.13' 
      - name: upgrade pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: | #called pipe
          pip install pytest
          pytest -v


      # - name: Login to Docker Hub   #ctrl / to mass comment out
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}  

  deploy: #look for an action that does all the heroky pushing for us
    runs-on: ubuntu-latest
    needs: [build] #list of jobs that need to be done before this one
    environment:
      name: production
    steps: 
      - name: pulling git repo
        uses: actions/checkout@v2 #github marketplace has prebuild actions to use, such as checkout
      - name: install CLI #Cant use run and uses in the same step
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh 
      - name: deploying on heroku  
        uses: akhileshns/heroku-deploy@v3.14.15 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      #Nomally have to( but now actions do that for us):
      #pull our github repo
      #heroku logins
      #add git remote for heroku
      #git push heroku main

      - name: deploying to ubuntu server
        uses: appleboy/ssh-action@master
        with: 
          host: ${{secrets.UBUNTU_PROD_HOST}}
          username: ${{secrets.UBUNTU_PROD_USERNAME}}
          password: ${{secrets.UBUNTU_PROD_PASSWORD}}
          script: |
            cd app/src
            git pull 
            echo "SVKJ\$NVJN4v4v" | sudo -S systemctl restart fastapi 
#Above is what you do when you want to input something into a password without creating a new command

#log into ubunter server
#cd into app/src
#Pull
#systemctl restart